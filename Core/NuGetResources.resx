<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Manifest_DependencyIdRequired" xml:space="preserve">
    <value>需要依赖项 Id。</value>
  </data>
  <data name="Manifest_RequiredMetadataMissing" xml:space="preserve">
    <value>{0} 是必须的。</value>
  </data>
  <data name="Manifest_RequireLicenseAcceptanceRequiresLicenseUrl" xml:space="preserve">
    <value>启用要求接受许可证。</value>
  </data>
  <data name="Manifest_UriCannotBeEmpty" xml:space="preserve">
    <value>{0}不能为空。</value>
  </data>
  <data name="ErrorReadingFile" xml:space="preserve">
    <value>读取 '{0}' 错误。</value>
  </data>
  <data name="InvalidVersionString" xml:space="preserve">
    <value>'{0}' 不是有效的版本字符串。</value>
  </data>
  <data name="DependencyHasInvalidVersion" xml:space="preserve">
    <value>依赖项 '{0}' 的版本无效。</value>
  </data>
  <data name="DuplicateDependenciesDefined" xml:space="preserve">
    <value>'{0}' 已经为 '{1}' 定义了一个依赖项。</value>
  </data>
  <data name="PackageDoesNotContainManifest" xml:space="preserve">
    <value>包不包含清单。</value>
  </data>
  <data name="CannotCreateEmptyPackage" xml:space="preserve">
    <value>不能创建没有依赖关系或内容的包。</value>
  </data>
  <data name="InvalidPackageId" xml:space="preserve">
    <value>包ID '{0}' 包含无效字符。有效的包id示例包括 'MyPackage' and 'MyPackage.Sample'。</value>
  </data>
  <data name="PackageAuthoring_FileNotFound" xml:space="preserve">
    <value>没找到文件： '{0}'。</value>
  </data>
  <data name="IncompatibleSchema" xml:space="preserve">
    <value>'{0}' 的模式版本与 NuGet 包浏览器 的 '{1}' 版本不兼容。请将NuGet 包浏览器升级到最新版本。</value>
  </data>
  <data name="PackageContentsVerifyError" xml:space="preserve">
    <value>无法正确下载包。包内容无法验证。</value>
  </data>
  <data name="InvalidFeed" xml:space="preserve">
    <value>处理请求时出现错误。请验证 '{0}' 是一个有效的来源。</value>
  </data>
  <data name="InvalidFrameworkNameFormat" xml:space="preserve">
    <value>无效的框架名称格式。预期值 {framework}{version}-{profile}.</value>
  </data>
  <data name="MissingFrameworkName" xml:space="preserve">
    <value>缺失框架名称。</value>
  </data>
  <data name="UserSettings_KeyDoesNotExist" xml:space="preserve">
    <value>密钥 '{0}' 不存在。</value>
  </data>
  <data name="UserSettings_SectionDoesNotExist" xml:space="preserve">
    <value>'{0}' 部分不存在。</value>
  </data>
  <data name="UserSettings_UnableToParseConfigFile" xml:space="preserve">
    <value>无法解析配置文件。</value>
  </data>
  <data name="Manifest_ExcludeContainsInvalidCharacters" xml:space="preserve">
    <value>排除路径 '{0}' 包含无效字符。</value>
  </data>
  <data name="Manifest_SourceContainsInvalidCharacters" xml:space="preserve">
    <value>源路径 '{0}' 包含无效字符。</value>
  </data>
  <data name="Manifest_TargetContainsInvalidCharacters" xml:space="preserve">
    <value>目标路径 '{0}' 包含无效字符。</value>
  </data>
  <data name="Manifest_InvalidSchemaNamespace" xml:space="preserve">
    <value>无效的架构名称空间 '{0}'。</value>
  </data>
  <data name="Manifest_InvalidVersion" xml:space="preserve">
    <value>没有找到与模式版本 '{0}' 对应的名称空间。在 '{1}' 中的VersionToSchemaMappings 字典中添加一个条目。</value>
  </data>
  <data name="UnableToResolveUri" xml:space="preserve">
    <value>无法解析 '{0}'。</value>
  </data>
  <data name="Manifest_InvalidReference" xml:space="preserve">
    <value>无效的程序集引用 '{0}'。确保在lib目录中存在名为 '{0}' 的文件。</value>
  </data>
  <data name="Manifest_InvalidPrereleaseDependency" xml:space="preserve">
    <value>一个包的稳定发行版不应该依赖于预发行包。要么修改依赖项 '{0}' 的版本规范，要么更新版本字段。</value>
  </data>
  <data name="Manifest_IdMaxLengthExceeded" xml:space="preserve">
    <value>包 Id 不能超过100个字符。</value>
  </data>
  <data name="UnableToLocateWIF" xml:space="preserve">
    <value>连接到源 '{0}' 需要安装 Windows Identity Foundation 运行时。</value>
  </data>
  <data name="Manifest_DependenciesHasMixedElements" xml:space="preserve">
    <value>&lt;dependencies&gt; 元素不能同时包含 &lt;group&gt; 和 &lt;dependency&gt; 子元素。</value>
  </data>
  <data name="Manifest_InvalidMinClientVersion" xml:space="preserve">
    <value>包清单中的 'minClientVersion' 属性的值无效。它必须是一个有效的版本字符串。</value>
  </data>
  <data name="UnknownSchemaVersion" xml:space="preserve">
    <value>未知模式版本 '{0}'。</value>
  </data>
  <data name="Manifest_ReferencesIsEmpty" xml:space="preserve">
    <value>package\metadata\references\group 至少必须包含一个 &lt;reference&gt; 子元素。</value>
  </data>
  <data name="Manifest_ReferencesHasMixedElements" xml:space="preserve">
    <value>&lt;references&gt; 元素不能同时包含 &lt;group&gt; 和 &lt;reference&gt; 子元素。</value>
  </data>
</root>